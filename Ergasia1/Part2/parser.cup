import java_cup.runtime.*;

//===================================================================
//===================================================================
parser code  {:
	public void report_error(String message, Object info) {
		StringBuilder m = new StringBuilder("Error ");

		if (info instanceof java_cup.runtime.Symbol)
			m.append( "("+info.toString()+")" );

		m.append(" : "+message);

		System.out.println(m);
	}

	public void report_fatal_error(String message, Object info) {
		report_error(message, info);
		throw new RuntimeException("Fatal Syntax Error");
	}
:};
//===================================================================
//===================================================================

// TERMINALS
terminal	IN;
terminal	IF, ELSE; // if_then_statement, if_then_else_statement
terminal	COMMA, LBRACE, RBRACE, LPAREN, RPAREN;
terminal	EQ, PLUS;

terminal 	String STRING_LITERAL;
terminal 	String IDENTIFIER;

// NON TERMINALS
non terminal String expr;	// initial state
non terminal String function_declaration, function_body;
non terminal String inner_function_call, outer_function_call;							// function calls
non terminal String inner_parameters_list, decl_parameters_list, outer_parameters_list;	// parameter types
non terminal String parameters_part, parameters_part2, parameters_part3;
non terminal String expressions, expressions2, expressions3;
non terminal String if_expression, condition, cond_type;
non terminal String literal, parameters;
//===================================================================
//===================================================================

precedence left PLUS;

start with expr;

expr ::= expr function_declaration:func			{: System.out.println("(define " + func + ")"); :}
		| expr outer_function_call:out			{: System.out.println("(" + out + ")"); :}
		| ;

function_declaration ::= IDENTIFIER:id LPAREN parameters:dec function_body:bd RBRACE	{: RESULT = "(" + id + dec + ") " + bd; :}
						| IDENTIFIER:id LPAREN RPAREN LBRACE function_body:bd RBRACE	{: RESULT = "(" + id + ") " + bd; :};

outer_function_call ::= IDENTIFIER:id LPAREN parameters:param RPAREN	{: RESULT =  id + param; :}
					| IDENTIFIER:id LPAREN RPAREN						{: RESULT =  id; :};

inner_function_call ::= IDENTIFIER:id LPAREN inner_parameters_list:param RPAREN		{: RESULT =  id + param; :}
					| IDENTIFIER:id LPAREN RPAREN									{: RESULT =  id; :};

parameters::= outer_parameters_list:p1					{: RESULT = p1; :}
			 | decl_parameters_list:p2 RPAREN LBRACE	{: RESULT = p2 ; :}
			 ;

outer_parameters_list ::= expressions:exp parameters_part:c		{: RESULT = exp + c; :};

inner_parameters_list ::= function_body:exp parameters_part3:c	{: RESULT = " " + exp + c; :};

parameters_part3 ::= COMMA inner_parameters_list:d				{: RESULT = d; :}
				|												{: RESULT = ""; :};

decl_parameters_list ::= expressions2:exp parameters_part2:c	{: RESULT = " " + exp + c; :};


parameters_part ::= COMMA outer_parameters_list:d				{: RESULT = d; :}
				|												{: RESULT = ""; :};

parameters_part2 ::= COMMA decl_parameters_list:d				{: RESULT = d; :}
				| 												{: RESULT = ""; :};


expressions ::= STRING_LITERAL:s							{: RESULT = " \"" + s + "\"" ; :}
			| outer_function_call:out						{: RESULT = " (" + out + ")"; :}
			| expressions:e1 PLUS expressions:e2			{: RESULT = "(" + "string-append" + " " + e1 + " " + e2 + ")" ;:}
			| LPAREN expressions:e RPAREN					{: RESULT = e; :};

expressions2 ::= IDENTIFIER:e								{: RESULT = e; :};

expressions3 ::= literal:lit								{: RESULT = lit; :}
				| expressions3:e1 PLUS expressions3:e2		{: RESULT = "(" + "string-append" + " " + e1 + " " + e2 + ")" ; :}
				| LPAREN expressions3:e RPAREN				{: RESULT = e; :};

literal ::= IDENTIFIER:id			{: RESULT = id; :}
		| STRING_LITERAL:s			{: RESULT = "\"" + s + "\"" ; :}
		| inner_function_call:c		{: RESULT = "(" + c + ")"; :};

function_body ::= expressions3:e						{: RESULT = e; :}
				| if_expression:if_e					{: RESULT = if_e; :};

if_expression ::= IF LPAREN condition:cond RPAREN function_body:b1 ELSE function_body:b2	{: RESULT = "(if " + "(" + cond + ")" + b1 + b2 + ")"; :};

condition ::= function_body:e1 cond_type:t function_body:e2			{: RESULT = t + e1 + " " + e2; :}
			| LPAREN condition:c RPAREN								{: RESULT = c; :};

cond_type ::= IN:in		{: RESULT = "substring? "; :}
			| EQ:eq 	{: RESULT = "equal? "; :};
