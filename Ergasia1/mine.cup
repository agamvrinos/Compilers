import java_cup.runtime.*;

//===================================================================
//===================================================================
parser code  {:
	public void report_error(String message, Object info) {
		StringBuilder m = new StringBuilder("Error ");

		if (info instanceof java_cup.runtime.Symbol)
			m.append( "("+info.toString()+")" );

		m.append(" : "+message);

		System.out.println(m);
	}

	public void report_fatal_error(String message, Object info) {
		report_error(message, info);
		throw new RuntimeException("Fatal Syntax Error");
	}
:};
//===================================================================
//===================================================================

// TERMINALS
terminal			IN;
terminal			IF, ELSE; // if_then_statement, if_then_else_statement
terminal			COMMA, LBRACE, RBRACE, LPAREN, RPAREN;
terminal			EQ, PLUS;
terminal 			RPAREN_LBRACE;

terminal 			java.lang.String STRING_LITERAL;
terminal 			java.lang.String IDENTIFIER; // name

// NON TERMINALS
non terminal function_declaration, function_header, function_body, literal,literal2,parameters_part;			// fucntion declaration
non terminal inner_function_call, outer_function_call, function_call_inner, function_call_outer,partwo;						// function calls
non terminal parameters_list, inner_parameters_list, outer_parameters_list;	// parameter types
non terminal expr, calculations, simple_literal, if_block_expressions, cond_type, cond_val,partone;
non terminal expressions, if_expression, afterplus, condition, concatenation, leftplus, rightplus;

non terminal decl_parameters_list;
//===================================================================
//===================================================================

non terminal expressions2, parameters_part2, parameters_part3, call_parameters_list, expressions3;

precedence left PLUS;

start with expr;

expr ::= expr function_declaration
		| expr outer_function_call:out		
		| ;

outer_function_call ::= IDENTIFIER LPAREN outer_parameters_list RPAREN

outer_parameters_list ::= call_parameters_list
						;

function_declaration ::= IDENTIFIER LPAREN decl_parameters_list RPAREN_LBRACE function_body RBRACE;


//=====================================================
inner_parameters_list ::= function_body parameters_part	// function body giati borei na parei kai if stmt
						| ;								// ektos apo expressions

parameters_part ::= COMMA inner_parameters_list
				| ;
//=====================================================
decl_parameters_list ::= expressions2 parameters_part2
					| ;

parameters_part2 ::= COMMA decl_parameters_list
				| ;
//=====================================================
call_parameters_list ::= expressions3 parameters_part3
					| ;

parameters_part3 ::= COMMA call_parameters_list
				| ;
//=====================================================
function_body ::= expressions
				| if_expression;

// expressions for the inner parameters
expressions ::= expressions PLUS expressions
			| LPAREN expressions RPAREN
			| literal;

// expressions2 for the declaration parameters (IDENTIFIER or parenthesized expressions)
// CONCAT is not allowed when declaring ex. my_func(x+x){ body }	// error
expressions2 ::=  LPAREN expressions2 RPAREN
				| literal2;

// expressions3 for the call parameters
expressions3 ::= expressions3 PLUS expressions3
			| LPAREN expressions3 RPAREN
			| STRING_LITERAL
			| outer_function_call;

if_expression ::= IF LPAREN condition RPAREN function_body ELSE function_body;

condition ::= expressions cond_type expressions		// simple in/eq condition
		| LPAREN condition RPAREN;					// multiple parentheses outer ex . if ((x in "foo"))

cond_type ::= IN | EQ ;

// literal for the inner parameters
literal ::= IDENTIFIER
		| STRING_LITERAL
		| inner_function_call;

// literal2 for the function declaration
literal2 ::= IDENTIFIER;

inner_function_call ::= IDENTIFIER LPAREN inner_parameters_list RPAREN;
